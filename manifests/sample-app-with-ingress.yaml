# Sample Application with ALB Ingress
# This demonstrates how to expose an application using the AWS Load Balancer Controller
#
# Deploy this after installing the AWS Load Balancer Controller:
# kubectl apply -f manifests/sample-app-with-ingress.yaml

---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: sample-app

---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: sample-app
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"

---
# Service
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: sample-app
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP  # Use ClusterIP for Ingress, or LoadBalancer for direct NLB/ALB

---
# Ingress - Creates an Application Load Balancer
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-ingress
  namespace: sample-app
  annotations:
    # AWS Load Balancer Controller annotations
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
    # For HTTPS, uncomment and provide certificate ARN:
    # alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    # alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:region:account:certificate/xxxxx
    # alb.ingress.kubernetes.io/ssl-redirect: '443'

    # Health check settings
    alb.ingress.kubernetes.io/healthcheck-path: /
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'

    # Additional settings
    alb.ingress.kubernetes.io/load-balancer-attributes: idle_timeout.timeout_seconds=60
    alb.ingress.kubernetes.io/tags: Environment=production,Project=cloud-solutions
spec:
  ingressClassName: alb
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx-service
            port:
              number: 80

---
# Alternative: Service with LoadBalancer type (creates NLB directly)
# Uncomment to use this instead of Ingress:
#
# apiVersion: v1
# kind: Service
# metadata:
#   name: nginx-loadbalancer
#   namespace: sample-app
#   annotations:
#     service.beta.kubernetes.io/aws-load-balancer-type: "external"
#     service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "ip"
#     service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
# spec:
#   selector:
#     app: nginx
#   ports:
#     - protocol: TCP
#       port: 80
#       targetPort: 80
#   type: LoadBalancer

---
# To get the ALB DNS name after deployment:
# kubectl get ingress -n sample-app nginx-ingress
#
# Or watch for the load balancer to be ready:
# kubectl get ingress -n sample-app nginx-ingress -w
#
# The ADDRESS column will show the ALB DNS name when ready
