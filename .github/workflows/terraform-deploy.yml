name: Terraform Deploy

on:
  push:
    branches:
      - main
    paths:
      - "*.tf"
      - "modules/**"
      - ".github/workflows/terraform-deploy.yml"
      - "environments/**"
    tags:
      - "dev-*"
      - "stg-*"
      - "prd-*"
  pull_request:
    branches:
      - main
    paths:
      - "*.tf"
      - "modules/**"
      - ".github/workflows/terraform-deploy.yml"
      - "environments/**"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        type: choice
        options:
          - development
          - staging
          - production
        default: development

env:
  TF_VERSION: ${{ vars.TF_VERSION }}

jobs:
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}

    steps:
      - name: Determine environment
        id: set-env
        run: |
          # Priority 1: Manual workflow dispatch
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Priority 2: PR labels (deploy:development, deploy:staging, deploy:production)
          # PRs without labels only run plan (no apply)
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            LABELS='${{ toJson(github.event.pull_request.labels.*.name) }}'
            if echo "$LABELS" | grep -q "deploy:production"; then
              echo "environment=production" >> $GITHUB_OUTPUT
              exit 0
            elif echo "$LABELS" | grep -q "deploy:staging"; then
              echo "environment=staging" >> $GITHUB_OUTPUT
              exit 0
            elif echo "$LABELS" | grep -q "deploy:development"; then
              echo "environment=development" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "::warning::No deployment label found on PR. Only 'terraform plan' will run (no apply)."
              echo "environment=development" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi

          # Priority 3: Git tags (dev-*, stg-*, prd-*)
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
            if [[ "$TAG" == prd-* ]]; then
              echo "environment=production" >> $GITHUB_OUTPUT
              exit 0
            elif [[ "$TAG" == stg-* ]]; then
              echo "environment=staging" >> $GITHUB_OUTPUT
              exit 0
            elif [[ "$TAG" == dev-* ]]; then
              echo "environment=development" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "::error::Invalid tag format. Use dev-*, stg-*, or prd-* for deployments."
              exit 1
            fi
          fi

          # Priority 4: Push to main branch = production deployment
          if [ "${{ github.ref }}" == "refs/heads/main" ] && [ "${{ github.event_name }}" == "push" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            exit 0
          fi

          # No default - fail if no valid trigger
          echo "::error::Deployment blocked: No valid deployment trigger found."
          exit 1

      - name: Display Selected Environment
        run: |
          echo "## Selected Environment: ${{ steps.set-env.outputs.environment }} ðŸŽ¯" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Ref**: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY

  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    needs: determine-environment
    outputs:
      fmt_outcome: ${{ steps.fmt.outcome }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive

      - name: Terraform Init
        run: terraform init -backend=false

      - name: Terraform Validate
        run: terraform validate

  terraform-plan:
    name: Terraform Plan (${{ needs.determine-environment.outputs.environment }})
    runs-on: ubuntu-latest
    needs: [determine-environment, terraform-validate]
    if: github.event_name == 'pull_request'

    permissions:
      contents: read
      id-token: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install tf-summarize
        run: |
          wget -q -O - https://github.com/dineshba/tf-summarize/releases/latest/download/tf-summarize_linux_amd64.tar.gz | sudo tar -xz -C /usr/local/bin/ tf-summarize

      - name: Setup Infracost
        uses: infracost/actions/setup@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Terraform Init
        id: init
        env:
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
        run: |
          terraform init \
            -backend-config="environments/${ENVIRONMENT}/tfbackend.hcl"

      - name: Terraform Plan
        id: plan
        env:
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
        run: |
          if [ -f "environments/${ENVIRONMENT}/terraform.tfvars" ]; then
            terraform plan -var-file="environments/${ENVIRONMENT}/terraform.tfvars" -no-color -input=false -out=tfplan.binary
          else
            echo "::warning::No tfvars file found for ${ENVIRONMENT}, running without tfvars"
            terraform plan -no-color -input=false -out=tfplan.binary
          fi
          terraform show -json tfplan.binary > tfplan.json
        continue-on-error: true

      - name: Generate Plan Summary
        if: steps.plan.outcome == 'success'
        run: |
          echo "## Terraform Plan Summary ðŸ“Š" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          tf-summarize -md tfplan.json >> $GITHUB_STEP_SUMMARY

      - name: Generate Cost Estimate
        if: steps.plan.outcome == 'success'
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Infrastructure Cost Estimate ðŸ’°" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          infracost breakdown --path tfplan.json --format table --show-skipped >> $GITHUB_STEP_SUMMARY

      - name: Generate PR Comment
        if: github.event_name == 'pull_request'
        env:
          FMT_OUTCOME: ${{ needs.terraform-validate.outputs.fmt_outcome }}
          INIT_OUTCOME: ${{ steps.init.outcome }}
          PLAN_OUTCOME: ${{ steps.plan.outcome }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          WORKFLOW_TYPE: infrastructure
        run: bash .github/scripts/pr-comment.sh

      - name: Post/Update PR Comment
        if: github.event_name == 'pull_request'
        uses: mshick/add-pr-comment@v2
        with:
          message-id: terraform-deployment-preview
          message-path: /tmp/pr-comment.txt

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  terraform-apply:
    name: Terraform Apply (${{ needs.determine-environment.outputs.environment }})
    runs-on: ubuntu-latest
    needs: [determine-environment, terraform-validate]
    if: |
      github.event_name == 'workflow_dispatch' ||
      startsWith(github.ref, 'refs/tags/') ||
      (github.ref == 'refs/heads/main' && github.event_name == 'push')

    permissions:
      contents: read
      id-token: write

    environment:
      name: ${{ needs.determine-environment.outputs.environment }}
      url: ${{ steps.terraform-output.outputs.eks_endpoint }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Terraform Init
        env:
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
        run: |
          terraform init \
            -backend-config="environments/${ENVIRONMENT}/tfbackend.hcl"

      - name: Terraform Plan
        env:
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
        run: |
          if [ -f "environments/${ENVIRONMENT}/terraform.tfvars" ]; then
            terraform plan -var-file="environments/${ENVIRONMENT}/terraform.tfvars" -input=false -out=tfplan
          else
            echo "::warning::No tfvars file found for ${ENVIRONMENT}, running without tfvars"
            terraform plan -input=false -out=tfplan
          fi

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false tfplan

      - name: Terraform Output
        id: terraform-output
        run: |
          echo "eks_endpoint=$(terraform output -raw eks_cluster_endpoint)" >> $GITHUB_OUTPUT
          echo "eks_cluster=$(terraform output -raw eks_cluster_name)" >> $GITHUB_OUTPUT
          echo "vpc_id=$(terraform output -raw vpc_id)" >> $GITHUB_OUTPUT

      - name: Summary
        run: |
          echo "## Deployment Complete! ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Infrastructure Details" >> $GITHUB_STEP_SUMMARY
          echo "- **EKS Cluster**: ${{ steps.terraform-output.outputs.eks_cluster }}" >> $GITHUB_STEP_SUMMARY
          echo "- **EKS Endpoint**: ${{ steps.terraform-output.outputs.eks_endpoint }}" >> $GITHUB_STEP_SUMMARY
          echo "- **VPC ID**: ${{ steps.terraform-output.outputs.vpc_id }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Configure kubectl with: \`aws eks update-kubeconfig --region \$AWS_REGION --name ${{ steps.terraform-output.outputs.eks_cluster }}\`" >> $GITHUB_STEP_SUMMARY
