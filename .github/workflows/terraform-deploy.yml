name: Terraform Deploy

on:
  push:
    branches:
      - main
    paths:
      - '*.tf'
      - 'modules/**'
      - '.github/workflows/terraform-deploy.yml'
      - 'environments/**'
    tags:
      - 'dev-*'
      - 'staging-*'
      - 'prod-*'
  pull_request:
    branches:
      - main
    paths:
      - '*.tf'
      - 'modules/**'
      - '.github/workflows/terraform-deploy.yml'
      - 'environments/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - development
          - staging
          - production
        default: development

env:
  TF_VERSION: 1.13.3

jobs:
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}

    steps:
      - name: Determine environment
        id: set-env
        run: |
          # Priority 1: Manual workflow dispatch
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Priority 2: PR labels (deploy:dev, deploy:staging, deploy:production)
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            LABELS='${{ toJson(github.event.pull_request.labels.*.name) }}'
            if echo "$LABELS" | grep -q "deploy:production"; then
              echo "environment=production" >> $GITHUB_OUTPUT
            elif echo "$LABELS" | grep -q "deploy:staging"; then
              echo "environment=staging" >> $GITHUB_OUTPUT
            elif echo "$LABELS" | grep -q "deploy:development"; then
              echo "environment=development" >> $GITHUB_OUTPUT
            else
              echo "environment=development" >> $GITHUB_OUTPUT
            fi
            exit 0
          fi

          # Priority 3: Git tags (dev-*, staging-*, prod-*)
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
            if [[ "$TAG" == prod-* ]]; then
              echo "environment=production" >> $GITHUB_OUTPUT
            elif [[ "$TAG" == staging-* ]]; then
              echo "environment=staging" >> $GITHUB_OUTPUT
            elif [[ "$TAG" == dev-* ]]; then
              echo "environment=development" >> $GITHUB_OUTPUT
            else
              echo "environment=production" >> $GITHUB_OUTPUT
            fi
            exit 0
          fi

          # Default: production for main branch pushes
          echo "environment=production" >> $GITHUB_OUTPUT

  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    needs: determine-environment
    outputs:
      fmt_outcome: ${{ steps.fmt.outcome }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive

      - name: Terraform Init
        run: terraform init -backend=false

      - name: Terraform Validate
        run: terraform validate

  terraform-plan:
    name: Terraform Plan (${{ needs.determine-environment.outputs.environment }})
    runs-on: ubuntu-latest
    needs: [determine-environment, terraform-validate]
    if: github.event_name == 'pull_request'

    permissions:
      contents: read
      id-token: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Terraform Init
        id: init
        env:
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
        run: |
          terraform init \
            -backend-config="bucket=${{ vars.TF_STATE_BUCKET }}" \
            -backend-config="key=${ENVIRONMENT}/terraform.tfstate" \
            -backend-config="region=${{ vars.AWS_REGION }}"

      - name: Terraform Plan
        id: plan
        env:
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
        run: |
          if [ -f "environments/${ENVIRONMENT}/terraform.tfvars" ]; then
            terraform plan -var-file="environments/${ENVIRONMENT}/terraform.tfvars" -no-color -input=false
          else
            echo "::warning::No tfvars file found for ${ENVIRONMENT}, running without tfvars"
            terraform plan -no-color -input=false
          fi
        continue-on-error: true

      - name: Comment PR
        if: github.event_name == 'pull_request'
        env:
          FMT_OUTCOME: ${{ needs.terraform-validate.outputs.fmt_outcome }}
          INIT_OUTCOME: ${{ steps.init.outcome }}
          PLAN_OUTCOME: ${{ steps.plan.outcome }}
          PLAN: ${{ steps.plan.outputs.stdout }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: bash .github/scripts/pr-comment.sh

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  terraform-apply:
    name: Terraform Apply (${{ needs.determine-environment.outputs.environment }})
    runs-on: ubuntu-latest
    needs: [determine-environment, terraform-validate]
    if: |
      (github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')) ||
      startsWith(github.ref, 'refs/tags/')

    permissions:
      contents: read
      id-token: write

    environment:
      name: ${{ needs.determine-environment.outputs.environment }}
      url: ${{ steps.terraform-output.outputs.alb_dns }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Terraform Init
        env:
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
        run: |
          terraform init \
            -backend-config="bucket=${{ vars.TF_STATE_BUCKET }}" \
            -backend-config="key=${ENVIRONMENT}/terraform.tfstate" \
            -backend-config="region=${{ vars.AWS_REGION }}"

      - name: Terraform Plan
        env:
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
        run: |
          if [ -f "environments/${ENVIRONMENT}/terraform.tfvars" ]; then
            terraform plan -var-file="environments/${ENVIRONMENT}/terraform.tfvars" -input=false -out=tfplan
          else
            echo "::warning::No tfvars file found for ${ENVIRONMENT}, running without tfvars"
            terraform plan -input=false -out=tfplan
          fi

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false tfplan

      - name: Terraform Output
        id: terraform-output
        run: |
          echo "alb_dns=$(terraform output -raw alb_dns_name)" >> $GITHUB_OUTPUT
          echo "ecs_cluster=$(terraform output -raw ecs_cluster_name)" >> $GITHUB_OUTPUT
          echo "ecs_service=$(terraform output -raw ecs_service_name)" >> $GITHUB_OUTPUT

      - name: Summary
        run: |
          echo "## Deployment Complete! ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Infrastructure Details" >> $GITHUB_STEP_SUMMARY
          echo "- **ALB DNS**: ${{ steps.terraform-output.outputs.alb_dns }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ECS Cluster**: ${{ steps.terraform-output.outputs.ecs_cluster }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ECS Service**: ${{ steps.terraform-output.outputs.ecs_service }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Access your application at: http://${{ steps.terraform-output.outputs.alb_dns }}" >> $GITHUB_STEP_SUMMARY
